<?php
/*
  loadConfig includes php files and fetches config data from the server
  and stores config from database into constants:
    EXPERIMENT_ID               primary key
    REPARSE_LESSON              does control/landmarks html pages need to be regenerated
    PATH_ORIGINAL_LESSON        provided by study administrator
    PATH_CONTROL_VERSION        generated by this app
    PATH_LANDMARK_VERSION       generated by this app
    GOAL_CONTROL_GROUP_SIZE     from database as entered by study admin
    GOAL_LANDMARK_GROUP_SIZE    from database as entered by study admin
    CONTROL_TESTS_COMPLETE      generated by this app
    LANDMARK_TESTS_COMPLETE     generated by this app
    TREATMENTS                  array listing html tags each with treatment parameters
*/
function loadConfig() {
    include_once "../config/conf.php";
    include_once "../src/db_connection.php";
    
    // get config data from database
    $conn = openDBConnection();
    
    if(!$conn) {
        die("Connecting to database failed: " . mysqli_connect_error());
    }
    
    // retrieve active experiment id and status
    $sql = "SELECT active_experiment_id, reparse_lesson FROM config";
    $result = $conn->query($sql);

    if ($result->num_rows != 1) {
        switch (num_rows) {
            case 0:
                echo "ERROR: no active experiment found in the config table.";
                break;
            default:
                echo "ERROR: there should be no more than 1 active experiment listed in the config table.";
                break;
        }
    } else {    
        // save data
        $row = $result->fetch_assoc();
        define ("EXPERIMENT_ID", $row["active_experiment_id"]);
        
        // will make this a constant later after ensuring control/landmark lesson paths exist
        $reparseLesson = $row["reparse_lesson"];
        
        // retrieve experiment data
        $sql = "SELECT * FROM config, experiment WHERE experiment.experiment_id = config.active_experiment_id;";
        $result = $conn->query($sql);

        if ($result->num_rows != 1) {
            switch (num_rows) {
                case 0:
                    echo "ERROR: no data in experiment table for active experiment found.";
                    break;
                default:
                    echo "ERROR: there should be no more than 1 experiment matching the active exp ID listed in the experiment table.";
                    break;
            }
        } else {    
            // save data
            $row = $result->fetch_assoc();
            define("PATH_ORIGINAL_LESSON",        $row["path_original_lesson"]);
            define("GOAL_CONTROL_GROUP_SIZE",     $row["goal_control_group_size"]);
            define("GOAL_LANDMARK_GROUP_SIZE",    $row["goal_landmark_group_size"]);
            define("CONTROL_TESTS_COMPLETE",      $row["control_tests_complete"]);
            define("LANDMARK_TESTS_COMPLETE",     $row["landmark_tests_complete"]);
        }
        
        // get the name of the file (without directories or extension)
        $lessonName = basename(PATH_ORIGINAL_LESSON,".html");

        // define landmark and control paths
        define("PATH_CONTROL_VERSION", "../resources/" . $lessonName . "_no_landmarks.html");
        define("PATH_LANDMARK_VERSION", "../resources/" . $lessonName . "_with_landmarks.html");

        // if landmark/control files don't exist, set reparseLesson to true
        if (file_exists(PATH_CONTROL_VERSION) && file_exists(PATH_LANDMARK_VERSION)) {
            define("REPARSE_LESSON", $reparseLesson);
        } else {
            define("REPARSE_LESSON", 1);
        }

        // retrieve treatment data
        $sql = "SELECT html_tag, treatment_type, is_unique_style FROM treatment, config WHERE treatment.experiment_id = config.active_experiment_id;";
        $result = $conn->query($sql);
        if ($result->num_rows == 0) {
            echo "ERROR: no data in treatment table for active experiment found.";
        } else {    
            // save data
            $treatmentArray = [[]];
            while ($row = $result->fetch_assoc()) {
                $treatmentArray[] = $row;
            }

            define("TREATMENTS", $treatmentArray);
        }
    }
    $conn->close();    
}
/*
  addLandmarks creates a new dom with Landmarks inserted.
  Landmarks are chosen based on TREATMENT_TYPE and TREATMENT_SCOPE.
*/
function addLandmarks($dom) {
    $newDOM = clone $dom;
    
    for ($row = 1; $row < count(TREATMENTS); $row++) {
        $tag                = TREATMENTS[$row]["html_tag"];
        $treatmentType      = TREATMENTS[$row]["treatment_type"];
        $isUniqueStyle      = TREATMENTS[$row]["is_unique_style"];

        $text = "";
        $divs = $newDOM->getElementsByTagName($tag);

        if ($isUniqueStyle == 1) {
            for ($i = 0; $i < $divs->length; $i++) {
                // save the text
                $text = $divs[$i]->textContent;
                // create a unique value to associate the text and treatment
                $hashValue = hash("md5", $text, false);
                
                // path to treatment image
                $path = generateTreatment($hashValue, $treatmentType);
                
                $divs[$i]->setAttribute('style', 'background: url(' . $path . ')');
            }
        } else {
            for ($i = 0; $i < $divs->length; $i++) {
                // save the text
                $tempText = $divs[$i]->textContent;
                $text = $text . $tempText;
            }
            //echo $text;
            $hashValue = hash("md5", $text, false);

            // path to treatment image
            $path = generateTreatment($hashValue, $treatmentType);
            
            // insert treatment css into dom
            $divs = $newDOM->getElementsByTagName($tag);
            for ($i = 0; $i < $divs->length; $i++) {
                $divs[$i]->setAttribute('style', 'background: url(' . $path . ')');
            }
        }
    } 
    return ($newDOM);
}

/*
  generateTreatment generates a hash from a string and then applies that hash to generate a random treatment based on the treatment type from the config settings.
*/
function generateTreatment(string $hash, $treatmentType) {
    // seeding rand with the hash int to ensure participants will always receive that landmark for that string
    $hashToInt = crc32($hash);
    srand($hashToInt);

    if ($treatmentType == "background") {
        // create landmark via random colored noise
        $x = 20;
        $y = 30;
        $im = imagecreatetruecolor($x,$y);
        $state = $y;
        for($i = 0; $i < $x; $i++) {
            for($j = 0; $j < $y; $j++) {
                // creating image with vertical lines
                if ($state % $y == 0) {
                    $color = imagecolorallocate($im, rand(200,255), rand(200,255), rand(200,255));
                }
                imagesetpixel($im, $i, $j, $color);
                $state++;
            }
        }    
        
        // save image to file
        $path = "../resources/" . $hashToInt . ".png";
        imagepng($im, $path);
        
        return($path);
    }
}

/* 
  isControlGroup detemrines whether a participant should be assigned to the control group.
  Uses constants: GOAL_CONTROL_GROUP_SIZE, GOAL_LANDMARK_GROUP_SIZE, CONTROL_TESTS_COMPLETE, LANDMARK_TESTS_COMPLETE
  
  Returns True if the Control group has a lower completion percent or has surprassed the goal by a lower percent than the Experimental group.
    CONTROL	      EXPERIMENTAL
    25/50 = 0.5   75/100 = 0.75	    0.5 < 0.75  True
    25/50 = 0.5   25/100 = 0.25     0.5 < 0.25  False
    75/50 = 1.5   175/100 = 1.75    1.5 < 1.75  True    
*/
function isControlGroup() {
    return ((LANDMARK_TESTS_COMPLETE / GOAL_LANDMARK_GROUP_SIZE) > (CONTROL_TESTS_COMPLETE / GOAL_CONTROL_GROUP_SIZE));
}

/* reparseLesson will check database and if reparsing is needed,
   recreate the control and landmark versions of the lesson and save the new paths to the database.
*/
function reparseLesson() {
    // create DOMDocument from Lesson
    $lessonDOM = new DOMDocument();
    $lessonDOM->loadHTMLFile(PATH_ORIGINAL_LESSON);
    
    // save just the body
    $body = $lessonDOM->getElementsByTagName('body');
    
    if ( $body && 0 < $body->length ) {
        $body = $body->item(0);
        $lessonDOM->savehtml($body);
    }
    
    // discard white space
    $lessonDOM->preserveWhiteSpace = false;
    
    // save lesson with no landmarks to html (control version)
    file_put_contents(PATH_CONTROL_VERSION,$lessonDOM->saveHTML());

    // create lesson with Landmarks
    $landmarkDOM = addLandmarks($lessonDOM);
    
    // save lesson with landmark to html
    file_put_contents(PATH_LANDMARK_VERSION,$landmarkDOM->saveHTML());
    
    // update database that reparse is no longer required
    $conn = openDBConnection();
    
    $sql = "UPDATE config SET reparse_lesson = '0' WHERE active_experiment_id = " . EXPERIMENT_ID;
    if ($conn->query($sql) === FALSE) {
        echo "Error updating record: " . $conn->error;
    }
    closeDBConnection($conn);
}

?>